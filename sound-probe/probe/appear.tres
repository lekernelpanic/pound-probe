[gd_resource type="VisualShader" load_steps=21 format=2]

[sub_resource type="VisualShaderNodeScalarFunc" id=11]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShaderNodeScalarFunc" id=12]
output_port_for_preview = 0
function = 12

[sub_resource type="VisualShaderNodeScalarOp" id=22]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.01 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=23]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShaderNodeColorConstant" id=24]
constant = Color( 0.501961, 0.501961, 1, 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=25]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.2 ]
operator = 1

[sub_resource type="VisualShaderNodeColorOp" id=26]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeColorOp" id=27]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarUniform" id=28]
uniform_name = "apparition"
hint = 1

[sub_resource type="VisualShaderNodeScalarOp" id=29]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeInput" id=31]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id=32]
source = 5

[sub_resource type="VisualShaderNodeScalarOp" id=33]
operator = 7

[sub_resource type="VisualShaderNodeBooleanUniform" id=37]
uniform_name = "on"
default_value_enabled = true
default_value = true

[sub_resource type="VisualShaderNodeScalarSwitch" id=38]
default_input_values = [ 0, false, 1, 1.0, 2, 0.2 ]

[sub_resource type="VisualShaderNodeVectorOp" id=39]
operator = 2

[sub_resource type="OpenSimplexNoise" id=8]

[sub_resource type="NoiseTexture" id=9]
noise = SubResource( 8 )

[sub_resource type="VisualShaderNodeTexture" id=10]
texture = SubResource( 9 )

[sub_resource type="VisualShaderNodeScalarOp" id=14]
output_port_for_preview = 0
operator = 1

[resource]
code = "shader_type canvas_item;
render_mode unshaded;

uniform bool on = true;
uniform sampler2D tex_frg_8;
uniform float apparition : hint_range(0, 1);



void vertex() {
// Output:0

}

void fragment() {
// BooleanUniform:39
	bool n_out39p0 = on;

// ScalarSwitch:44
	float n_in44p1 = 1.00000;
	float n_in44p2 = 0.20000;
	float n_out44p0;
	if(n_out39p0)
	{
		n_out44p0 = n_in44p1;
	}
	else
	{
		n_out44p0 = n_in44p2;
	}

// Input:33

// Texture:34
	vec3 n_out34p0;
	float n_out34p1;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, UV.xy);
		n_out34p0 = TEXTURE_tex_read.rgb;
		n_out34p1 = TEXTURE_tex_read.a;
	}

// Color:25
	vec3 n_out25p0 = vec3(0.501961, 0.501961, 1.000000);
	float n_out25p1 = 1.000000;

// Texture:8
	vec4 tex_frg_8_read = texture(tex_frg_8, UV.xy);
	vec3 n_out8p0 = tex_frg_8_read.rgb;
	float n_out8p1 = tex_frg_8_read.a;

// ScalarUniform:29
	float n_out29p0 = apparition;

// ScalarOp:30
	float n_in30p1 = 0.50000;
	float n_out30p0 = n_out29p0 + n_in30p1;

// ScalarOp:9
	float n_out9p0 = dot(n_out8p0, vec3(0.333333, 0.333333, 0.333333)) - n_out30p0;

// ScalarFunc:13
	float n_out13p0 = abs(n_out9p0);

// ScalarFunc:10
	float n_out10p0 = round(n_out13p0);

// ScalarOp:22
	float n_in22p1 = 0.01000;
	float n_out22p0 = n_out13p0 - n_in22p1;

// ScalarFunc:23
	float n_out23p0 = round(n_out22p0);

// ScalarOp:26
	float n_out26p0 = n_out10p0 - n_out23p0;

// ColorOp:27
	vec3 n_out27p0 = min(n_out25p0, vec3(n_out26p0));

// ColorOp:28
	vec3 n_out28p0 = vec3(1.0) - (vec3(1.0) - n_out34p0) * (vec3(1.0) - n_out27p0);

// VectorOp:46
	vec3 n_out46p0 = vec3(n_out44p0) * n_out28p0;

// ScalarOp:35
	float n_out35p0 = min(n_out34p1, n_out10p0);

// Output:0
	COLOR.rgb = n_out46p0;
	COLOR.a = n_out35p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 2567.78, -166.453 )
mode = 1
flags/light_only = false
flags/unshaded = true
nodes/fragment/0/position = Vector2( 3580, 460 )
nodes/fragment/8/node = SubResource( 10 )
nodes/fragment/8/position = Vector2( 740, 480 )
nodes/fragment/9/node = SubResource( 14 )
nodes/fragment/9/position = Vector2( 980, 680 )
nodes/fragment/10/node = SubResource( 11 )
nodes/fragment/10/position = Vector2( 1740, 700 )
nodes/fragment/13/node = SubResource( 12 )
nodes/fragment/13/position = Vector2( 1160, 700 )
nodes/fragment/22/node = SubResource( 22 )
nodes/fragment/22/position = Vector2( 1400, 440 )
nodes/fragment/23/node = SubResource( 23 )
nodes/fragment/23/position = Vector2( 1640, 440 )
nodes/fragment/25/node = SubResource( 24 )
nodes/fragment/25/position = Vector2( 2180, 360 )
nodes/fragment/26/node = SubResource( 25 )
nodes/fragment/26/position = Vector2( 2020, 480 )
nodes/fragment/27/node = SubResource( 26 )
nodes/fragment/27/position = Vector2( 2440, 460 )
nodes/fragment/28/node = SubResource( 27 )
nodes/fragment/28/position = Vector2( 2760, 300 )
nodes/fragment/29/node = SubResource( 28 )
nodes/fragment/29/position = Vector2( 440, 740 )
nodes/fragment/30/node = SubResource( 29 )
nodes/fragment/30/position = Vector2( 780, 720 )
nodes/fragment/33/node = SubResource( 31 )
nodes/fragment/33/position = Vector2( 2180, 240 )
nodes/fragment/34/node = SubResource( 32 )
nodes/fragment/34/position = Vector2( 2440, 240 )
nodes/fragment/35/node = SubResource( 33 )
nodes/fragment/35/position = Vector2( 2740, 700 )
nodes/fragment/39/node = SubResource( 37 )
nodes/fragment/39/position = Vector2( 2560, -20 )
nodes/fragment/44/node = SubResource( 38 )
nodes/fragment/44/position = Vector2( 2920, 40 )
nodes/fragment/46/node = SubResource( 39 )
nodes/fragment/46/position = Vector2( 3220, 300 )
nodes/fragment/connections = PoolIntArray( 8, 0, 9, 0, 22, 0, 23, 0, 23, 0, 26, 1, 10, 0, 26, 0, 26, 0, 27, 1, 25, 0, 27, 0, 9, 0, 13, 0, 13, 0, 10, 0, 13, 0, 22, 0, 27, 0, 28, 1, 30, 0, 9, 1, 33, 0, 34, 2, 34, 0, 28, 0, 29, 0, 30, 0, 34, 1, 35, 0, 10, 0, 35, 1, 35, 0, 0, 1, 8, 0, 9, 0, 22, 0, 23, 0, 23, 0, 26, 1, 10, 0, 26, 0, 26, 0, 27, 1, 25, 0, 27, 0, 9, 0, 13, 0, 13, 0, 10, 0, 13, 0, 22, 0, 27, 0, 28, 1, 30, 0, 9, 1, 33, 0, 34, 2, 34, 0, 28, 0, 29, 0, 30, 0, 34, 1, 35, 0, 10, 0, 35, 1, 35, 0, 0, 1, 39, 0, 44, 0, 44, 0, 46, 0, 28, 0, 46, 1, 46, 0, 0, 0 )
nodes/light/0/position = Vector2( 440, 180 )
